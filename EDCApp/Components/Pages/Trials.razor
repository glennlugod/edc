@page "/trials"
@rendermode InteractiveServer
@attribute [Authorize]
@inject TrialService TrialService
@inject IConfiguration Config
@inject ITokenAcquisition TokenAcquisition
@inject NavigationManager NavigationManager
@inject ILogger<Trials> Logger

<PageTitle>Trials</PageTitle>

<div class="container">
    <h4 class="mb-4">Clinical Trials</h4>

    <button class="btn btn-primary mb-3" @onclick="OpenCreateTrialDialog">
        <i class="bi bi-plus-circle me-2"></i>Add New Trial
    </button>

    @if (trials == null)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        <table class="table table-hover table-striped">
            <thead>
                <tr>
                    <th>Trial Name</th>
                    <th>Sponsor</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trial in trials)
                {
                    <tr>
                        <td>@trial.TrialName</td>
                        <td>@trial.Sponsor</td>
                        <td>@trial.StartDate?.ToShortDateString()</td>
                        <td>@trial.EndDate?.ToShortDateString()</td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => OpenEditTrialDialog(trial)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => OpenDeleteConfirmationDialog(trial)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@if (showCreateTrialDialog)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditMode ? "Edit Trial" : "Create Trial")</h5>
                    <button type="button" class="btn-close" @onclick="CloseCreateTrialDialog"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentTrial" OnValidSubmit="@SubmitTrial">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="trialName">Trial Name</label>
                            <InputText id="trialName" class="form-control" @bind-Value="currentTrial.TrialName" />
                            <ValidationMessage For="@(() => currentTrial.TrialName)" />
                        </div>

                        <div class="form-group">
                            <label for="sponsor">Sponsor</label>
                            <InputText id="sponsor" class="form-control" @bind-Value="currentTrial.Sponsor" />
                        </div>

                        <div class="form-group">
                            <label for="startDate">Start Date</label>
                            <InputDate id="startDate" class="form-control" @bind-Value="currentTrial.StartDate" />
                        </div>

                        <div class="form-group">
                            <label for="endDate">End Date</label>
                            <InputDate id="endDate" class="form-control" @bind-Value="currentTrial.EndDate" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseCreateTrialDialog">Cancel</button>
                            <button type="submit" class="btn btn-primary">@(isEditMode ? "Update" : "Create")</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeleteConfirmation)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete the trial '@(trialToDelete?.TrialName)'?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Trial> trials = new();
    private bool showDeleteConfirmation = false;
    private bool showCreateTrialDialog = false;
    private bool isEditMode = false;
    private Trial currentTrial = new Trial { TrialName = "" }; // Initialize with a default TrialName
    private Trial? trialToDelete;

    protected override async Task OnInitializedAsync()
    {
        try {
            var dataverseUrl = Config["Dataverse:Url"];
            if (dataverseUrl == null)
            {
                throw new InvalidOperationException("Dataverse:Url is not configured.");
            }

            var accessToken = await TokenAcquisition
                .GetAccessTokenForUserAsync(
                    new[] { $"{dataverseUrl}/.default" });

            // Create token provider function for Dataverse
            Func<string, Task<string>> tokenProvider = async (resource) =>
            {
                return await Task.FromResult(accessToken);
            };

            // Connect to Dataverse
            TrialService.ServiceClient = new ServiceClient(new Uri(dataverseUrl), tokenProvider, true);

            await LoadTrials();
        }
        catch (Exception ex)
        {
            // Handle errors gracefully
            Console.WriteLine($"Error connecting to Dataverse: {ex.Message}");
        }
    }

    private async Task LoadTrials()
    {
        try
        {
            trials = await TrialService.GetTrialsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load trials: {ex.Message}");
        }
    }

    private void OpenCreateTrialDialog()
    {
        currentTrial = new Trial
        {
            TrialName = "" // Ensure TrialName is set
        };
        isEditMode = false;
        showCreateTrialDialog = true;
    }

    private void OpenEditTrialDialog(Trial trial)
    {
        currentTrial = new Trial
        {
            Id = trial.Id,
            TrialName = trial.TrialName, // Ensure TrialName is set
            Sponsor = trial.Sponsor,
            StartDate = trial.StartDate,
            EndDate = trial.EndDate
        };
        isEditMode = true;
        showCreateTrialDialog = true;
    }

    private async Task SubmitTrial()
    {
        try
        {
            if (isEditMode)
            {
                await TrialService.UpdateTrialAsync(currentTrial);
            }
            else
            {
                await TrialService.CreateTrialAsync(currentTrial);
            }

            await LoadTrials();
            CloseCreateTrialDialog();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting trial: {ex.Message}");
        }
    }

    private void CloseCreateTrialDialog()
    {
        showCreateTrialDialog = false;
        currentTrial = new Trial { TrialName = "" }; // Reset with a default TrialName
    }

    private void OpenDeleteConfirmationDialog(Trial trial)
    {
        trialToDelete = trial;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        trialToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (trialToDelete != null)
        {
            try
            {
                await TrialService.DeleteTrialAsync(trialToDelete.Id);
                await LoadTrials();
                showDeleteConfirmation = false;
                trialToDelete = null;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to delete trial: {ex.Message}");
            }
        }
    }
}
