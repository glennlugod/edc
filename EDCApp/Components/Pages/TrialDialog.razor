@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@page "/trial-dialog"

<div class="modal" tabindex="-1" style="display:block" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(IsEditMode ? "Edit Trial" : "Create Trial")</h5>
            </div>
            <div class="modal-body">
                <EditForm Model="@Trial" OnValidSubmit="@Submit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="trialName">Trial Name</label>
                        <InputText id="trialName" class="form-control" @bind-Value="Trial.TrialName" />
                        <ValidationMessage For="@(() => Trial.TrialName)" />
                    </div>

                    <div class="form-group">
                        <label for="sponsor">Sponsor</label>
                        <InputText id="sponsor" class="form-control" @bind-Value="Trial.Sponsor" />
                    </div>

                    <div class="form-group">
                        <label for="startDate">Start Date</label>
                        <InputDate id="startDate" class="form-control" @bind-Value="Trial.StartDate" />
                        @if (StartDateError != null)
                        {
                            <div class="text-danger">@StartDateError</div>
                        }
                    </div>

                    <div class="form-group">
                        <label for="endDate">End Date</label>
                        <InputDate id="endDate" class="form-control" @bind-Value="Trial.EndDate" />
                        @if (EndDateError != null)
                        {
                            <div class="text-danger">@EndDateError</div>
                        }
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                        <button type="submit" class="btn btn-primary">@(IsEditMode ? "Update" : "Create")</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private TrialService TrialService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    [Parameter] public Trial Trial { get; set; } = new Trial();
    [Parameter] public bool IsEditMode { get; set; }

    private string StartDateError;
    private string EndDateError;

    private async Task Submit()
    {
        StartDateError = ValidateStartDate();
        EndDateError = ValidateEndDate();

        if (string.IsNullOrEmpty(StartDateError) && string.IsNullOrEmpty(EndDateError))
        {
            try
            {
                if (IsEditMode)
                {
                    await TrialService.UpdateTrialAsync(Trial);
                }
                else
                {
                    await TrialService.CreateTrialAsync(Trial);
                }

                NavigationManager.NavigateTo("/trials");
            }
            catch (Exception ex)
            {
                // Consider adding a way to display error messages
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
    }

    private string ValidateStartDate()
    {
        if (Trial.StartDate == null)
            return "Start Date is required";
        
        if (Trial.EndDate.HasValue && Trial.StartDate > Trial.EndDate.Value)
            return "Start Date must be before End Date";
        
        return null;
    }

    private string ValidateEndDate()
    {
        if (Trial.EndDate == null)
            return "End Date is required";
        
        if (Trial.StartDate.HasValue && Trial.EndDate.Value < Trial.StartDate.Value)
            return "End Date must be after Start Date";
        
        return null;
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/trials");
    }
}
