@page "/accounts"
@using Microsoft.PowerPlatform.Dataverse.Client
@using Microsoft.Identity.Web
@inject ITokenAcquisition TokenAcquisition
@inject IConfiguration Config
@attribute [Authorize]

<h3>Accounts</h3>
@if (accounts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul>
        @foreach (var acc in accounts)
        {
            <li>@acc["name"]</li>
        }
    </ul>
}

@code {
    private List<Microsoft.Xrm.Sdk.Entity>? accounts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var dataverseUrl = Config["Dataverse:Url"];
            if (string.IsNullOrEmpty(dataverseUrl))
            {
                accounts = new List<Microsoft.Xrm.Sdk.Entity>();
                return;
            }

            // Create token provider function for Dataverse
            Func<string, Task<string>> tokenProvider = async (resource) =>
            {
                return await TokenAcquisition.GetAccessTokenForUserAsync(
                    new[] { $"{dataverseUrl}/.default" });
            };

            // Connect to Dataverse
            using var svc = new ServiceClient(new Uri(dataverseUrl), tokenProvider, true);

            // Query Accounts
            var query = new Microsoft.Xrm.Sdk.Query.QueryExpression("account")
            {
                ColumnSet = new Microsoft.Xrm.Sdk.Query.ColumnSet("name")
            };

            var results = await svc.RetrieveMultipleAsync(query);
            accounts = results.Entities.ToList();
        }
        catch (Exception ex)
        {
            // Handle errors gracefully
            Console.WriteLine($"Error connecting to Dataverse: {ex.Message}");
            accounts = new List<Microsoft.Xrm.Sdk.Entity>();
        }
    }
}
